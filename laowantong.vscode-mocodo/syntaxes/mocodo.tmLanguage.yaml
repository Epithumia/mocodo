---
name: Mocodo
scopeName: source.mocodo
uuid: 2AD24A5A-63C9-40B3-B6AA-E240B7B54480

# Warning: yaml_to_json_tmlanguage.py will suppress all " " symbols from the regexes.

variables:
  # terminals
  attr: '(?=\w) (?!_) [^\[\]>,]*[^\[\]>,\s]\b'
  box_def_prefix: '\+'
  box_name: '(?![\W_\d]) [^=<>,:\\]* [^-\[\]\\=<>,:\s\\]'
  card: '(?![-_\/]) (\w|\?){2} (?=[\s]*[^\w,\r\n:])'
  card_hidden: '-'
  card_prefix: '[_/]'
  colon: '\s*:\s*'
  comma: '\s*,\s*'
  constraint_leg: '<?(?:\.+|-+)>?'
  constraint_name: '\([\w\s]{0,3}\)'
  id_symbols: '(?: \d*0\d*_|_)'
  alt_id_symbols: '[1-9]+_'
  inheritance_name: '/ (?: XT\d?|TX\d?|X\d?|T\d?|\d? ) \\{1,2}'
  inheritance_arrow: '(?: <==?|<--?|--?>|==?> )'
  leg_arrow: '[<>]'
  morethan: '\s*>\s*'
  note: \[.*?\]
  number: '-?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?'
  # non-terminals
  constraint_coord: '(?: {{number}} | {{box_name}} )'
  foreign_reference: '#{{attr}} {{morethan}} {{attr}} {{morethan}} {{attr}}'
  entity_or_table_attr: '(?: {{attr}} | {{foreign_reference}} )'

patterns:
- include: "#indent"
- include: "#comment"
- include: "#phantoms"
- include: "#constraint_clause"
- include: "#inheritance_clause"
- include: "#association_clause"
- include: "#entity_clause"
- include: "#invalid"

repository:

  indent:
    match: ^\s+

  comment:
    patterns:
    - # Jupyter cell magic command, interpreted as a comment
      match: ((%%mocodo\b.*))$
      captures:
        '1': {name: markup.bold.mocodo}
        '2': {name: comment.line.magic.mocodo}
    - # Normal comment line
      match: (%.*)$
      captures:
        '1': {name: comment.line.normal.mocodo}

  phantoms:
    description: A line containing at least one colon, ane nothing else but spaces and colons
    match: :[:\s]*$
    name: markup.italic.phantom.mocodo

  association_clause:
    name: association.mocodo
    begin: '( {{box_def_prefix}} )? (( {{box_name}} )) (?={{comma}})'
    end: '$'
    beginCaptures:
      '1': { name: keyword.control.mocodo }
      '2': { name: markup.bold.association.mocodo }
      '3': { name: entity.name.function.association.mocodo }
    patterns:
      - include: "#association_legs"
      - include: "#association_attrs"
      - include: "#invalid"

  association_legs:
    name: legs.mocodo
    begin: '(?={{comma}})'
    end: '(?={{colon}}|$)'
    patterns:
      - match: >- # Multiline string without a linebreak appended at the end.
          {{comma}}
          (?: ({{card_hidden}})? ({{card_prefix}})? ({{card}}) )? ({{leg_arrow}})? \s*
          ({{note}})? \s*
          ({{box_name}}) \s*
        captures:
          '1': { name: keyword.control.card_hidden.mocodo }
          '2': { name: keyword.control.card_prefix.mocodo }
          '3': { name: storage.type.cardinality.mocodo }
          '5': { name: keyword.control.arrow.mocodo }
          '6': { name: string.unquoted.role.mocodo }
          '7': { name: entity.name.type.entity.mocodo }
      - include: "#invalid"

  association_attrs:
    name: attrs.mocodo
    begin: '{{colon}}'
    end: '$'
    patterns:
      - include: "#typed_attr"
      - match: '{{comma}}'
      - include: "#invalid"
  
  typed_attr:
    name: typed_attribute.mocodo
    match: '({{attr}}) \s* (({{note}}))?'
    captures:
      '1': { name: variable.attribute.assocation.mocodo }
      '2': { name: string.quoted.attr_type.mocodo }
      '3': { name: markup.italic.attr_type.mocodo }

  entity_clause:
    name: entity.mocodo
    begin: '( {{box_def_prefix}} )? (( {{box_name}} )) {{colon}}'
    end: $
    beginCaptures:
      '1': { name: keyword.control.mocodo }
      '2': { name: markup.bold.entity.mocodo }
      '3': { name: entity.name.type.entity.mocodo }
    patterns:
      - # After the entity's name, process the first attribute
        # Underline it iff it is **not** prefixed by id_symbols.
        begin: '(?: ({{id_symbols}}) {{entity_or_table_attr}} | (({{alt_id_symbols}})? {{entity_or_table_attr}}) ) \s* (({{note}}))?'
        end: $
        beginCaptures:
          '0': { name: variable.attribute.mocodo }
          '1': { name: keyword.control.id_symbols.mocodo }
          '2': { name: markup.underline.mocodo }
          '3': { name: keyword.control.alt_id_symbols.mocodo }
          '4': { name: string.quoted.attr_type.mocodo }
          '5': { name: markup.italic.attr_type.mocodo }
        patterns:
          - # After the first attribute, process the remaining ones.
            # Underline them iff they are prefixed by a "_" symbol.
            match: '{{comma}} ( ({{id_symbols}}) ({{entity_or_table_attr}}) | ({{alt_id_symbols}})? {{entity_or_table_attr}} ) \s* (({{note}}))?'
            captures:
              '1': { name: variable.attribute.mocodo }
              '2': { name: keyword.control.id_symbols.mocodo }
              '3': { name: markup.underline.mocodo }
              '4': { name: keyword.control.alt_id_symbols.mocodo }
              '5': { name: string.quoted.attr_type.mocodo }
              '6': { name: markup.italic.attr_type.mocodo }
          - include: "#invalid"
      - include: "#invalid"

  constraint_clause:
    name: constraint.mocodo
    begin: '({{constraint_name}}) \s* ({{note}})? \s*'
    end: $
    beginCaptures:
      '1': { name: storage.type.constraint_name.mocodo }
      '2': { name: string.quoted.constraint_note.mocodo }
    patterns:
      - include: "#constraint_targets"

  constraint_targets:
    name: targets.mocodo
    begin: ''
    end: $
    patterns:
      - match: '({{constraint_leg}})? \s* ({{box_name}})'
        captures:
          '1': { name: keyword.control.constraint_leg.mocodo }
          '2': { name: keyword.other.unit.box.mocodo }
      - match: '{{comma}}'
      - include: "#constraint_coords"
      - include: "#invalid"
  
  constraint_coords:
    name: coords.mocodo
    match: '{{colon}} ({{constraint_coord}}) {{comma}} ({{constraint_coord}})$'
    captures:
      '1': { name: variable.x.mocodo }
      '2': { name: variable.y.mocodo }

  inheritance_clause:
    name: inheritance.mocodo
    begin: '(({{inheritance_name}})) \s* ({{box_name}})? \s* ({{inheritance_arrow}}) \s*'
    end: $
    beginCaptures:
      '1': { name: markup.underline.inheritance.mocodo }
      '2': { name: entity.name.function.inheritance.mocodo }
      '3': { name: entity.name.type.parent.mocodo }
      '4': { name: keyword.control.arrow.mocodo }
    patterns:
      - include: "#inheritance_children"

  inheritance_children:
    name: children.mocodo
    begin: ''
    end: $
    patterns:
      - match: '({{box_name}})'
        name: entity.name.type.child.mocodo
      - match: '{{comma}}'
      - include: "#inheritance_attrs"
      - include: "#invalid"

  inheritance_attrs:
    name: attrs.mocodo
    begin: '{{colon}}'
    end: '$'
    patterns:
      - match: '{{attr}}'
        name: variable.attribute.association.mocodo
      - match: '{{comma}}'
      - include: "#invalid"

  invalid:
    match: '.+'
    name: invalid.illegal.mocodo

# TODO: deal with "x_" prefixes, when x doesn't contain a zero
